const libdbus = @import("libdbus.zig");
const std = @import("std");
const Allocator = std.mem.Allocator;
pub const Connection = libdbus.Connection;
pub const Message = libdbus.Message;
pub const MessageIter = libdbus.MessageIter;
pub const Error = libdbus.Error;
pub const DBusError = libdbus.Errors.DBusError;

const types = @import("types.zig");
pub const getTupleTypes = types.getTupleTypes;
pub const Array = types.Array;
pub const Dict = types.Dict;
pub const Vardict = types.Vardict;
pub const Struct = types.Struct;
pub const Variant = types.Variant;
pub const AnyVariant = types.AnyVariant;
pub const Invalid = types.Invalid;
pub const Byte = types.Byte;
pub const Boolean = types.Boolean;
pub const Int16 = types.Int16;
pub const UInt16 = types.UInt16;
pub const Int32 = types.Int32;
pub const UInt32 = types.UInt32;
pub const Int64 = types.Int64;
pub const UInt64 = types.UInt64;
pub const Double = types.Double;
pub const String = types.String;
pub const ObjectPath = types.ObjectPath;
pub const Signature = types.Signature;
pub const signature = types.signature;

const service = @import("service.zig");
pub const Service = service.Service;
pub const Emitter = service.Emitter;
pub const RequstError = service.RequstError;
pub const publish = service.publish;
pub const unpublish = service.unpublish;
pub const Annotation = service.Annotation;
pub const PropertyAccess = service.PropertyAccess;
pub const Property = service.Property;
pub const Getter = service.Getter;
pub const Setter = service.Setter;
pub const Interface = service.Interface;
pub const Method = service.Method;
pub const MethodArgs = service.MethodArgs;
pub const MethodFunc = service.MethodFunc;
pub const SignalArgs = service.SignalArgs;
pub const Signal = service.Signal;
pub const Context = service.Context;

const object = @import("object.zig");
pub const Object = object.Object;
pub const ResultGet = object.ResultGet;
pub const ResultGetAll = object.ResultGetAll;

const common = @import("common.zig");
pub const Event = common.Event;
pub const Listener = common.Listener;
pub const freedesktopDBus = common.freedesktopDBus;
pub const call = common.call;
pub const callN = common.callN;
pub const CallNError = common.CallNError;
pub const CallError = common.CallError;
pub const Result = common.Result;

const bus = @import("bus.zig");
pub const readWrite = bus.readWrite;
pub const dispatch = bus.dispatch;
pub const GLibWatch = bus.GLibWatch;
pub const MatchRule = bus.MatchRule;
pub const Filter = bus.Filter;
pub const Bus = bus.Bus;
pub const withGLibLoop = bus.withGLibLoop;
test {
    _ = @import("libdbus.zig");
    _ = @import("types.zig");
    _ = @import("bus.zig");
    _ = @import("object.zig");
    _ = @import("service.zig");
}
